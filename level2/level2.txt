1.
It's the browsers hierarchy and stands for Document Object Model.
As soon as a page is loaded, the browser creates a DOM.
It's very important to understand the DOM, while working with CSS/JS, since these two can manipulate the DOM tree.

2.
target.innerHTML = "something" <- changes an elements inner html
target.appendChild(element); <- append an element to the DOM
target.parentNode.removeChild(target); <- remove an element from the DOM

3.
It's a boolean value, which executes asynchronously in relation to page parsing.
Meaning, it will execute as soon as it's available.
Very nice to use when fetching REST Api.

4.
It's where you can find the js-file and a perfect place to debug your js code.
You can add breakpoints to your code, refresh the browser and run through your code step, by step.
If console.log(); doesn't work, this is a deeper way of debugging.

5.
It's a way to execute code asynchronously.
It doesn't follow the natural order of parsing.
When a promise is called, the code doesn't wait for a response, but continues parsing.
Then the promise is pending, and will return later at some point, either as fulfilled or rejected.

6.
Application Programming Interface. It's gives you a way of communicating with different software.
When using JS's fetch, one can connect to an API and fetch data.
An API for a website allows two software programs to communicate.

7.
I think of it as an alarm system, where the programmer decides the actions:
  1. select a place to set the trigger
  2. select what should trigger the alarm
  3. decide what happens, once it's triggered
Select which element to "listen" to.
You can "listen" for clicks, mouseover, keydown and a lot more.
Then when the alarm is triggered, it runs what ever code that's inside the code block.

8.
